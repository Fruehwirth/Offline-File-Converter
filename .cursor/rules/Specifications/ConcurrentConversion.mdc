---
description: 'Concurrent file conversion processing and smart transcoding warnings for audio formats. Apply when implementing parallel conversion logic or audio format quality warnings.'
---

# Concurrent Conversion & Transcoding Warnings

## Overview

Enables simultaneous conversion of multiple files with intelligent quality warnings for lossy-to-lossy audio transcoding.

## Smart Format Detection

**Utility:** `audioFormatUtils.ts`

- **Lossy Detection**: Identifies lossy formats (MP3, AAC, M4A, OGG)
- **Lossless Detection**: Identifies lossless formats (WAV, FLAC)
- **Transcoding Detection**: Warns when converting between lossy formats
- **Warning Generation**: User-friendly quality degradation messages

### Warning Scenarios

- **Lossy ‚Üí Lossy**: ‚ö†Ô∏è Warning about generation loss (e.g., MP3 ‚Üí M4A)
- **Lossless ‚Üí Lossy**: ‚ÑπÔ∏è Info about compression (optimal workflow)
- **Lossy ‚Üí Lossless**: ‚ÑπÔ∏è No quality gain (file size increase only)
- **Lossless ‚Üí Lossless**: No warning (no quality loss)

## Concurrent Processing

### Architecture

- **Before**: Sequential processing (one file at a time)
- **After**: Concurrent processing (multiple files simultaneously)

### Implementation

- Uses `Promise.allSettled()` to process all files in parallel
- Each file maintains independent progress tracking
- Better system resource utilization (CPU, GPU, hardware acceleration)
- Faster overall conversion times

### Benefits

- **Speed**: Multiple files convert simultaneously
- **Efficiency**: Better CPU/resource utilization
- **UX**: See progress on all files at once

## UI Enhancements

### FileList Component

- **Processing Counter**: Shows currently converting file count
- **Status Summary**: Real-time counts (processing/completed/queued/failed)
- **Individual Progress**: Each file shows progress bar and percentage
- **Status Indicators**: Visual dots with animations
  - üîµ Blue pulsing = Processing
  - üü¢ Green = Completed
  - ‚ö™ Gray = Queued
  - üî¥ Red = Failed

### TargetFormatSelector Component

- **Inline Warnings**: Shows transcoding warnings for lossy target formats
- **Visual Feedback**: Yellow warning box with icon and detailed message
- **Context-Aware**: Only shows when applicable to current files

## Conversion Flow

**App.tsx:**

- Refactored `handleConvert()` for concurrent processing
- Transcoding warning toast before conversion starts
- Maintains error handling and progress tracking
- Compatible with both image and audio conversions

## Example

### Sequential (Before)

```
File 1: [=====>    ] 50%
File 2: [          ] 0%  (waiting)
File 3: [          ] 0%  (waiting)
```

### Concurrent (After)

```
File 1: [=====>    ] 50%
File 2: [===>      ] 30%  (processing)
File 3: [==        ] 20%  (processing)
```

### Transcoding Warning

When converting MP3 ‚Üí M4A:

```
‚ö†Ô∏è Quality loss: Converting MP3 ‚Üí M4A is lossy-to-lossy transcoding.
   For best quality, convert from original lossless sources (WAV, FLAC).
```

## Performance

- Web Workers handle heavy processing (no main thread blocking)
- Concurrent processing leverages multi-core CPUs
- Efficient state updates for progress tracking
- No memory leaks (proper cleanup in `Promise.allSettled`)

## Files

- `src/features/conversion/audioFormatUtils.ts` - Format detection utilities
- `src/__tests__/audioFormatUtils.test.ts` - Tests
- `src/pages/App.tsx` - Concurrent conversion logic
- `src/components/FileList.tsx` - Enhanced status display
- `src/components/TargetFormatSelector.tsx` - Transcoding warnings

---
description: Detailed specification for the slide-out drawer UI that allows users to select target file formats for conversion. Integrated with the dynamic button system at the bottom of the application.
alwaysApply: false
alias: 'Shelf, Pick File Type, Format Picker'
---

# FileType Picker - Slide-Out Drawer Specification

## Overview

The FileType Picker is implemented as a **slide-out drawer** that appears above the dynamic button system. It uses a click-to-toggle pattern rather than hover, providing better UX especially on touch devices.

**Design Standard**: All animations must be buttery smooth, satisfying, and modern - using pill-shaped buttons with rounded corners for a modern, polished feel.

## Architecture

### Component Structure

```
App.tsx (Main Container)
├── FileList (Scrollable)
│   ├── File Items
│   └── "Add More Files" Button (at end of list)
├── Hidden <input type="file">
└── Fixed Bottom Section (z-50)
    ├── Frosted Glass Backdrop (pointer-events: none)
    ├── Drawer Container (z-10, behind buttons)
    │   └── Drawer (Format Selector + Cancel)
    └── Dynamic Button System (z-20, above drawer)
        ├── Main Convert/Pick Button
        ├── Convert Again Button (icon only)
        └── Download Button
```

### State Management

- `isDrawerOpen` (boolean): Controls drawer visibility
- `selectedTargetFormat` (FormatId | null): Currently selected format
- `availableTargets` (FormatId[]): Compatible formats for loaded files

## UI Behavior

### Initial State (No Format Selected)

- Button displays: **"Pick filetype"** icon + text
- Button is **enabled** if `availableTargets.length > 0`
- Button is **disabled** only if `availableTargets.length === 0`
- Drawer is hidden (max-height: 0, opacity: 0)

### Opening the Drawer

- User clicks "Pick filetype" button
- `isDrawerOpen` toggles to `true`
- Drawer slides down with 300ms transition
- Drawer contains:
  - `TargetFormatSelector` component (format buttons)
  - "Cancel" button at bottom

### Selecting a Format

- User clicks a format button (e.g., ".png", ".jpg")
- `selectedTargetFormat` is set
- Drawer **automatically closes** via `useEffect` hook
- Button changes to **"Convert"** with rotate icon

### Canceling

- User clicks "Cancel" button in drawer
- `isDrawerOpen` set to `false`
- Drawer slides back up
- No format is selected

### Converting

- User clicks "Convert" button (when format is selected)
- Conversion starts
- Drawer is explicitly closed (`setIsDrawerOpen(false)`)

## Critical Implementation Details

### Button Disabled Logic

**CRITICAL**: The button must be clickable to open the drawer!

```tsx
disabled={availableTargets.length === 0 && !isConverting}
```

**Why this works:**

- When `availableTargets.length > 0` → Button is enabled → Can click to open drawer
- When `selectedTargetFormat` is set → Button is enabled → Can click to convert
- Only disabled when there are NO compatible formats at all

**WRONG Implementation (causes bug):**

```tsx
// DON'T DO THIS - button becomes unclickable when no format selected
disabled={!canConvert && !isConverting && (!availableTargets.length || selectedTargetFormat === null)}
```

### Drawer Animation

```tsx
className={`
  absolute left-0 right-0 bottom-0 z-10
  transition-all duration-300 ease-out overflow-hidden origin-bottom
  ${isDrawerOpen && !selectedTargetFormat && availableTargets.length > 0
    ? 'max-h-[500px] pointer-events-auto'
    : 'max-h-0 pointer-events-none'}
`}
```

**Positioning**:

- **Behind buttons**: `z-10` (buttons are z-20)
- **Bottom-aligned**: `bottom-0` with container margins
- **Grows upward**: Drawer expands vertically from bottom when opened
- Uses `max-height` transition (not height) for smooth animation
- `origin-bottom` ensures animation starts from bottom edge
- `overflow-hidden` prevents content from showing during collapse

**Interaction**:

- `pointer-events-auto` when open (drawer is clickable)
- `pointer-events-none` when closed (doesn't block button clicks)
- Drawer only visible if: `isDrawerOpen && !selectedTargetFormat && availableTargets.length > 0`

**Layout Integration**:

- Drawer grows behind the button system
- Button system (z-20) always stays on top
- Smooth 300ms transition matches button animations

### Auto-Close on Selection

```tsx
useEffect(() => {
  if (selectedTargetFormat) {
    setIsDrawerOpen(false)
  }
}, [selectedTargetFormat])
```

Automatically closes drawer when user selects a format, providing seamless UX.

## Visual Design

### Drawer Container

- **Background**: `bg-brand-bg-secondary` (solid, no transparency)
- **Border**: `border border-brand-border` (1px solid)
- **Rounded corners**: `rounded-[36px]` (pill-shaped, fully rounded)
- **Padding**: `p-4` (16px all sides)
- **Bottom margin**: `mb-4` (space between drawer and buttons)
- **Shadow**: `shadow-2xl` (depth and elevation)

### Cancel Button (inside drawer)

- **Full width**: `w-full`
- **Shape**: `rounded-full` (pill-shaped to match drawer)
- **Border**: `border border-brand-border`
- **Background**: `bg-gray-100 dark:bg-black/20` (solid)
- **Hover**: `hover:bg-gray-200 dark:hover:bg-black/30` (smooth transition)
- **Top margin**: `mt-4` (space from format selector)
- **Transition**: `transition-all` (smooth hover effect)

### Main Action Button (Pick Filetype / Convert)

- **Height**: `72px` (fixed, matches button system)
- **Shape**: `rounded-full` (pill-shaped)
- **Accent color**: `bg-brand-accent hover:bg-brand-accent-hover` (solid, no transparency)
- **Disabled color**: `bg-gray-400 dark:bg-gray-700` (solid, no transparency)
- **Text**: Shows "Pick filetype" or "Convert" based on `selectedTargetFormat`
- **Icons**: `w-6 h-6` with `shrink-0` to prevent compression
- **Text**: `whitespace-nowrap` to prevent wrapping
- **Width**: Animates between 0% and 100% based on state (see DynamicButtonSystem spec)

## Integration with Dynamic Button System

The FileType Picker drawer is integrated with the dynamic button system:

### Z-Index Layering (bottom to top):

1. **Frosted backdrop**: pointer-events: none (visual only)
2. **Drawer** (z-10): Behind buttons, grows upward
3. **Button system** (z-20): Always on top, receives all clicks

### State-Based Visibility:

- **Drawer visible**: When `isDrawerOpen && !selectedTargetFormat && availableTargets.length > 0`
- **Main button visible**: When `!allFilesConverted`
- **Convert Again + Download visible**: When `allFilesConverted`

### Width Coordination:

- Drawer uses same container margins as buttons (`CONTAINER_PADDING`)
- All elements share `max-width: 630px` constraint
- Maintains visual alignment across drawer and buttons

See **DynamicButtonSystem.mdc** for detailed button animation specifications.

## Integration with FileList

The "Add More Files" button is rendered **inside** `FileList.tsx` at the end of the file list:

```tsx
<FileList onAddFiles={() => fileInputRef.current?.click()} />
```

**Rationale**:

- Keeps "Add more files" contextually with the files
- Maintains consistent width with file items
- Scrolls with the file list
- Simpler layout structure

## Common Pitfalls

1. **Button Disabled Too Early**: Don't disable button when no format selected - must be clickable to open drawer
2. **Drawer Doesn't Show**: Verify `availableTargets.length > 0` and targets calculation works
3. **Z-Index Conflicts**: Drawer (z-10) must be below buttons (z-20) but above backdrop
4. **Width Misalignment**: All elements share `max-width: 630px` with same padding (`CONTAINER_PADDING`)
5. **Pointer Events**: Drawer needs `pointer-events-none` when collapsed to not block button clicks
6. **Animation Conflicts**: Drawer 300ms transition must not conflict with button width animations
7. **Transparency Issues**: Use solid colors, not alpha values (except for dark mode overlays)
8. **Border Radius**: Use `rounded-[36px]` for drawer, `rounded-full` for buttons (pill-shaped)

## Testing Checklist

### Drawer Functionality

- [ ] Upload files → "Pick filetype" button becomes enabled
- [ ] Click "Pick filetype" → Drawer slides up from behind buttons
- [ ] Drawer grows upward, buttons stay in place (no layout shift)
- [ ] Drawer has visible shadow and pill-shaped corners
- [ ] Click format in drawer → Drawer auto-closes smoothly
- [ ] Button changes to "Convert" with icon after selection
- [ ] Click "Cancel" in drawer → Drawer closes, no format selected

### Button System Integration

- [ ] "Pick filetype" button has full width (100%) when visible
- [ ] Button animates smoothly when converting (shows progress)
- [ ] After conversion: Main button slides out (width → 0)
- [ ] Convert Again button slides in (icon only, 72px square)
- [ ] Download button slides in (fills remaining space)
- [ ] All buttons maintain 72px height at all times
- [ ] Buttons never shrink/compress - overflow clips if needed

### Visual Design

- [ ] All buttons are pill-shaped (`rounded-full`)
- [ ] Drawer has rounded corners (`rounded-[36px]`)
- [ ] No transparency in button backgrounds (solid colors)
- [ ] Progress bars are solid colors (no alpha)
- [ ] Icons have `shrink-0` and don't compress
- [ ] Text has `whitespace-nowrap` and doesn't wrap
- [ ] Hover states transition smoothly

### Layout Consistency

- [ ] All elements align with same max-width (630px)
- [ ] Drawer and buttons share consistent padding
- [ ] Z-index layering correct (backdrop < drawer < buttons)
- [ ] Drawer doesn't block button clicks when collapsed
- [ ] File list remains stationary during all transitions

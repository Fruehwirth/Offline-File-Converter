---
description: Detailed specification for the slide-out drawer UI that allows users to select target file formats for conversion. Integrated with the dynamic button system at the bottom of the application.
alwaysApply: false
alias: 'Shelf, Pick File Type, Format Picker'
---

# FileType Picker - Slide-Out Drawer Specification

## Overview

The FileType Picker is implemented as a **slide-out drawer** that appears above the dynamic button system. It uses a click-to-toggle pattern rather than hover, providing better UX especially on touch devices.

**Design Standard**: All animations must be buttery smooth, satisfying, and modern - using pill-shaped buttons with rounded corners for a modern, polished feel.

## Architecture

### Component Structure

```
App.tsx (Main Container)
├── FileList (Scrollable)
│   ├── File Items
│   └── "Add More Files" Button (at end of list)
├── Hidden <input type="file">
└── Fixed Bottom Section (z-50)
    ├── Frosted Glass Backdrop (pointer-events: none)
    ├── Drawer Container (z-10, behind buttons)
    │   └── Drawer (Format Selector + Cancel)
    └── Dynamic Button System (z-20, above drawer)
        ├── Main Convert/Pick Button
        ├── Convert Again Button (icon only)
        └── Download Button
```

### State Management

- `isDrawerOpen` (boolean): Controls drawer visibility
- `selectedTargetFormat` (FormatId | null): Currently selected format
- `availableTargets` (FormatId[]): Compatible formats for loaded files

## UI Behavior

### Initial State (No Format Selected)

- Button displays: **"Pick filetype"** icon + text
- Button is **enabled** if `availableTargets.length > 0`
- Button is **disabled** only if `availableTargets.length === 0`
- Drawer is hidden (max-height: 0, opacity: 0)

### Opening the Drawer

- User clicks "Pick filetype" button
- `isDrawerOpen` toggles to `true`
- Drawer slides down with 300ms transition
- Drawer contains:
  - `TargetFormatSelector` component (format buttons)
  - "Cancel" button at bottom

### Selecting a Format

- User clicks a format button (e.g., ".png", ".jpg")
- `selectedTargetFormat` is set
- Drawer **automatically closes** via `useEffect` hook
- Button changes to **"Convert"** with rotate icon

### Canceling

- User clicks "Cancel" button in drawer
- `isDrawerOpen` set to `false`
- Drawer slides back up
- No format is selected

### Converting

- User clicks "Convert" button (when format is selected)
- Conversion starts
- Drawer is explicitly closed (`setIsDrawerOpen(false)`)

## Critical Implementation Details

### Button Disabled Logic

**CRITICAL**: The button must be clickable to open the drawer!

```tsx
disabled={availableTargets.length === 0 && !isConverting}
```

**Why this works:**

- When `availableTargets.length > 0` → Button is enabled → Can click to open drawer
- When `selectedTargetFormat` is set → Button is enabled → Can click to convert
- Only disabled when there are NO compatible formats at all

**WRONG Implementation (causes bug):**

```tsx
// DON'T DO THIS - button becomes unclickable when no format selected
disabled={!canConvert && !isConverting && (!availableTargets.length || selectedTargetFormat === null)}
```

### Drawer Animation

**CSS Implementation** (see `src/css/layout/drawer.css`):

```css
.drawer__content {
  background-color: var(--color-bg-secondary);
  border-top-left-radius: 36px;
  border-top-right-radius: 36px;
  margin-bottom: 36px; /* ALWAYS 36px - keeps drawer centered on button */
  padding: 1rem; /* ALWAYS 1rem - never animates to prevent width changes! */
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  width: 100%;
}

.drawer--closed .drawer__content {
  max-height: 0;
  border-width: 0;
  border-color: transparent; /* Border fades to transparent, not white */
  box-shadow: none;
  overflow: hidden;
  visibility: hidden; /* Completely hidden behind buttons */
  transition:
    max-height 300ms ease-out,
    border-width 300ms ease-out,
    border-color 300ms ease-out,
    visibility 0s 300ms; /* Delayed - stays visible during closing animation */
}

.drawer--open .drawer__content {
  max-height: 600px; /* Dynamic - accommodates 2+ rows */
  border-width: 1px;
  border-color: var(--color-border);
  border-style: solid;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  overflow-y: auto;
  overflow-x: hidden;
  visibility: visible;
  transition:
    max-height 300ms ease-out,
    border-width 300ms ease-out,
    border-color 300ms ease-out,
    visibility 0s 0s; /* Immediate when opening */
  /* Hide scrollbar while keeping content scrollable */
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE/Edge */
}

/* Hide scrollbar for Chrome/Safari/Opera */
.drawer--open .drawer__content::-webkit-scrollbar {
  display: none;
}
```

**Positioning**:

- **Behind buttons**: `z-10` (buttons are z-20)
- **Bottom-aligned**: `bottom-0` with container margins
- **Grows upward**: Drawer expands vertically from bottom when opened
- **Centered on button**: `margin-bottom: 36px` (half of 72px button height)

**Dynamic Height**:

- **2 rows of formats**: ~220px height (fits comfortably)
- **3+ rows of formats**: Expands up to 600px with scrolling
- Uses `max-height` transition (not height) for smooth animation
- `overflow-y: auto` enables scrolling for many formats
- `overflow-x: hidden` prevents horizontal scroll

**Layout Stability**:

- `display: flex; flex-direction: column` establishes stable layout
- `padding` and `margin-bottom` are **ALWAYS constant** (never animated) to prevent width/position changes
- Content stays aligned at top during animation
- No jumping or shifting of format buttons
- Drawer and button container use `left: 1rem; right: 1rem` to respect container padding

**Smooth Transitions**:

- **max-height**: 300ms ease-out (drawer expansion from 0 to 600px)
- **border-width**: 300ms ease-out (border only visible when open)
- **border-color**: 300ms ease-out (fades to transparent when closing, prevents white flash)
- **visibility**: Delayed on close (0s delay with 300ms wait) to stay visible during animation
- **NO opacity animation** - only slide animation for a clean, modern feel
- **NO padding animation** - always 1rem to prevent width changes during animation

**Interaction**:

- `pointer-events-auto` when open (drawer is clickable)
- `pointer-events-none` when closed (doesn't block button clicks)
- Drawer only visible if: `isDrawerOpen && !selectedTargetFormat && availableTargets.length > 0`

**Layout Integration**:

- Drawer grows behind the button system
- Button system (z-20) always stays on top
- Lower edge of drawer stays perfectly centered on main button (36px = half of 72px)
- Border only visible when drawer is open (0px when closed)

### Auto-Close on Selection

```tsx
useEffect(() => {
  if (selectedTargetFormat) {
    setIsDrawerOpen(false)
  }
}, [selectedTargetFormat])
```

Automatically closes drawer when user selects a format, providing seamless UX.

### Bottom Section Slide Animation

The entire bottom section (drawer + buttons) slides out of view when no files are present:

**CSS Implementation** (see `src/css/layout/drawer.css`):

```css
.bottom-section {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 50;
  padding-bottom: 1rem;
  transition: bottom 400ms cubic-bezier(0.4, 0, 0.2, 1);
}

/* Hidden state - slides down out of view */
.bottom-section--hidden {
  bottom: -200px;
}
```

**Key Points**:

- Uses `bottom` property animation (NOT `transform`) to avoid layout issues with absolutely positioned children
- Animates to `bottom: -200px` when hidden (completely out of view)
- 400ms transition with easing for smooth, satisfying slide
- Entire section maintains width and height during animation
- Applied when `!hasFiles` in App.tsx

### Focus Styles (Accessibility)

All interactive buttons remove the default browser outline while maintaining keyboard accessibility:

**CSS Pattern**:

```css
.btn-primary:focus {
  outline: none; /* Removes white border on click */
}

.btn-primary:focus-visible {
  outline: 2px solid var(--color-accent);
  outline-offset: 2px;
}
```

**Applied to**:

- `.btn-primary` (main Convert button)
- `.btn-secondary` (general secondary buttons)
- `.btn-download` (Download button)
- `.app-convert-again-btn` (Convert Again icon button)
- Format picker buttons (inline `style={{ outline: 'none' }}`)

**Rationale**:

- `:focus` removes outline on mouse click (cleaner UI)
- `:focus-visible` adds accent outline for keyboard navigation (accessibility)
- No white border flash on button clicks
- Keyboard users still get clear focus indicators

## Visual Design

### Drawer Container

- **Background**: `bg-brand-bg-secondary` (solid, no transparency)
- **Border**: `border border-brand-border` (1px solid)
- **Rounded corners**: `rounded-[36px]` (pill-shaped, fully rounded)
- **Padding**: `p-4` (16px all sides)
- **Bottom margin**: `mb-4` (space between drawer and buttons)
- **Shadow**: `shadow-2xl` (depth and elevation)

### Cancel Button (inside drawer)

- **Full width**: `w-full`
- **Shape**: `rounded-full` (pill-shaped to match drawer)
- **Border**: `border border-brand-border`
- **Background**: `bg-gray-100 dark:bg-black/20` (solid)
- **Hover**: `hover:bg-gray-200 dark:hover:bg-black/30` (smooth transition)
- **Top margin**: `mt-4` (space from format selector)
- **Transition**: `transition-all` (smooth hover effect)

### Main Action Button (Pick Filetype / Convert)

- **Height**: `72px` (fixed, matches button system)
- **Shape**: `rounded-full` (pill-shaped)
- **Accent color**: `bg-brand-accent hover:bg-brand-accent-hover` (solid, no transparency)
- **Disabled color**: `bg-gray-400 dark:bg-gray-700` (solid, no transparency)
- **Text**: Shows "Pick filetype" or "Convert" based on `selectedTargetFormat`
- **Icons**: `w-6 h-6` with `shrink-0` to prevent compression
- **Text**: `whitespace-nowrap` to prevent wrapping
- **Width**: Animates between 0% and 100% based on state (see DynamicButtonSystem spec)

## Integration with Dynamic Button System

The FileType Picker drawer is integrated with the dynamic button system:

### Z-Index Layering (bottom to top):

1. **Frosted backdrop**: pointer-events: none (visual only)
2. **Drawer** (z-10): Behind buttons, grows upward
3. **Button system** (z-20): Always on top, receives all clicks

### State-Based Visibility:

- **Drawer visible**: When `isDrawerOpen && !selectedTargetFormat && availableTargets.length > 0`
- **Main button visible**: When `!allFilesConverted`
- **Convert Again + Download visible**: When `allFilesConverted`

### Width Coordination:

- Drawer uses same container margins as buttons (`CONTAINER_PADDING`)
- All elements share `max-width: 630px` constraint
- Maintains visual alignment across drawer and buttons

See **DynamicButtonSystem.mdc** for detailed button animation specifications.

## Integration with FileList

The "Add More Files" button is rendered **inside** `FileList.tsx` at the end of the file list:

```tsx
<FileList onAddFiles={() => fileInputRef.current?.click()} />
```

**Rationale**:

- Keeps "Add more files" contextually with the files
- Maintains consistent width with file items
- Scrolls with the file list
- Simpler layout structure

## Common Pitfalls

1. **Button Disabled Too Early**: Don't disable button when no format selected - must be clickable to open drawer
2. **Drawer Doesn't Show**: Verify `availableTargets.length > 0` and targets calculation works
3. **Z-Index Conflicts**: Drawer (z-10) must be below buttons (z-20) but above backdrop
4. **Width Misalignment**: All elements share `max-width: 630px` with same padding (`CONTAINER_PADDING`)
5. **Pointer Events**: Drawer needs `pointer-events-none` when collapsed to not block button clicks
6. **Animation Conflicts**: Drawer 300ms transition must not conflict with button width animations
7. **Transparency Issues**: Use solid colors, not alpha values (except for dark mode overlays)
8. **Border Radius**: Use `rounded-[36px]` for drawer, `rounded-full` for buttons (pill-shaped)
9. **Content Jumping During Animation**: Animating `padding` causes width changes. Keep padding constant (always 1rem) and only animate `max-height`.
10. **Border Visible When Closed**: Border must animate to `border-width: 0` AND `border-color: transparent` to prevent white flash during closing
11. **Visibility Animation Timing**: `visibility` must be delayed on close (`0s 300ms`) to stay visible during animation, but immediate on open (`0s 0s`)
12. **Transform Positioning Issues**: Use `bottom` property animation for bottom section, NOT `transform`, to avoid layout issues with absolutely positioned children
13. **White Border on Click**: Use `:focus { outline: none; }` and `:focus-visible` pattern for accessible focus styling without white border flash
14. **Scrollbar Visibility**: Hide scrollbar with `scrollbar-width: none`, `-ms-overflow-style: none`, and `::-webkit-scrollbar { display: none; }`
15. **Drawer Position Misalignment**: Drawer and button container must use `left: 1rem; right: 1rem` to align with container padding

## Testing Checklist

### Drawer Functionality

- [ ] Upload files → "Pick filetype" button becomes enabled
- [ ] Click "Pick filetype" → Drawer slides up from behind buttons
- [ ] Drawer grows upward, buttons stay in place (no layout shift)
- [ ] Drawer has visible shadow and pill-shaped corners
- [ ] Click format in drawer → Drawer auto-closes smoothly
- [ ] Button changes to "Convert" with icon after selection
- [ ] Click "Cancel" in drawer → Drawer closes, no format selected
- [ ] Content stays aligned during drawer animation (no jumping or horizontal wiggling)
- [ ] With 2 rows of formats: drawer fits perfectly without scrolling
- [ ] With 3+ rows of formats: drawer expands and enables vertical scrolling
- [ ] Scrollbar is invisible but content is still scrollable
- [ ] Border only visible when drawer is open (hidden at 0px height)
- [ ] Border fades to transparent during close (no white flash)
- [ ] Drawer stays visible during entire closing animation
- [ ] Drawer is completely hidden behind buttons when closed (not partially visible through gap)

### Bottom Section Animation

- [ ] No files present → Bottom section completely hidden (slid down out of view)
- [ ] Add files → Bottom section slides up smoothly with 400ms transition
- [ ] Section maintains width and height during slide animation
- [ ] No layout shift in file list when section appears/disappears
- [ ] Remove all files → Section slides back down smoothly

### Button System Integration

- [ ] "Pick filetype" button has full width (100%) when visible
- [ ] Button animates smoothly when converting (shows progress)
- [ ] After conversion: Main button slides out (width → 0)
- [ ] Convert Again button slides in (icon only, 72px square)
- [ ] Download button slides in (fills remaining space)
- [ ] All buttons maintain 72px height at all times
- [ ] Buttons never shrink/compress - overflow clips if needed
- [ ] No white border flash when clicking any button
- [ ] Keyboard focus shows accent outline (accessibility)

### Visual Design

- [ ] All buttons are pill-shaped (`rounded-full`)
- [ ] Drawer has rounded corners (`rounded-[36px]`)
- [ ] No transparency in button backgrounds (solid colors)
- [ ] Progress bars are solid colors (no alpha)
- [ ] Icons have `shrink-0` and don't compress
- [ ] Text has `whitespace-nowrap` and doesn't wrap
- [ ] Hover states transition smoothly

### Layout Consistency

- [ ] All elements align with same max-width (630px)
- [ ] Drawer and buttons share consistent padding
- [ ] Z-index layering correct (backdrop < drawer < buttons)
- [ ] Drawer doesn't block button clicks when collapsed
- [ ] File list remains stationary during all transitions
